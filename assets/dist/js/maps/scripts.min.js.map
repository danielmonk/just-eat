{"version":3,"sources":["jquery.matchHeight.js","nav.js","admin/form-insertion.js"],"names":["factory","define","amd","module","exports","require","jQuery","$","_parse","value","parseFloat","_rows","elements","$elements","lastTop","rows","each","$that","this","top","offset","css","lastRow","length","Math","floor","abs","add","push","_parseOptions","options","opts","byRow","property","target","remove","extend","_previousResizeWidth","_updateTimeout","matchHeight","fn","that","_groups","key","group","not","_apply","version","_throttle","_maintainScroll","_beforeUpdate","_afterUpdate","scrollTop","window","htmlHeight","outerHeight","$hiddenParents","parents","filter","data","attr","display","padding-top","padding-bottom","margin-top","margin-bottom","border-top-width","border-bottom-width","height","overflow","row","$row","targetHeight","style","verticalPadding","is","_applyDataApi","groups","$this","groupId","_update","event","throttle","type","windowWidth","width","setTimeout","on","nav","document","querySelector","navToggle","addEventListener","e","className","preventDefault","specifiedElement","contains","tinymce","PluginManager","editor","url","addButton","icon","text","onclick","windowManager","open","title","body","name","label","values","onsubmit","insertContent","form_insert"],"mappings":"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","file":"../scripts.min.js","sourcesContent":["/**\n* jquery-match-height master by @liabru\n* http://brm.io/jquery-match-height/\n* License: MIT\n*/\n\n;(function(factory) { // eslint-disable-line no-extra-semi\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Global\n        factory(jQuery);\n    }\n})(function($) {\n    /*\n    *  internal\n    */\n\n    var _previousResizeWidth = -1,\n        _updateTimeout = -1;\n\n    /*\n    *  _parse\n    *  value parse utility function\n    */\n\n    var _parse = function(value) {\n        // parse value and convert NaN to 0\n        return parseFloat(value) || 0;\n    };\n\n    /*\n    *  _rows\n    *  utility function returns array of jQuery selections representing each row\n    *  (as displayed after float wrapping applied by browser)\n    */\n\n    var _rows = function(elements) {\n        var tolerance = 1,\n            $elements = $(elements),\n            lastTop = null,\n            rows = [];\n\n        // group elements by their top position\n        $elements.each(function(){\n            var $that = $(this),\n                top = $that.offset().top - _parse($that.css('margin-top')),\n                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;\n\n            if (lastRow === null) {\n                // first item on the row, so just push it\n                rows.push($that);\n            } else {\n                // if the row top is the same, add to the row group\n                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {\n                    rows[rows.length - 1] = lastRow.add($that);\n                } else {\n                    // otherwise start a new row group\n                    rows.push($that);\n                }\n            }\n\n            // keep track of the last row top\n            lastTop = top;\n        });\n\n        return rows;\n    };\n\n    /*\n    *  _parseOptions\n    *  handle plugin options\n    */\n\n    var _parseOptions = function(options) {\n        var opts = {\n            byRow: true,\n            property: 'height',\n            target: null,\n            remove: false\n        };\n\n        if (typeof options === 'object') {\n            return $.extend(opts, options);\n        }\n\n        if (typeof options === 'boolean') {\n            opts.byRow = options;\n        } else if (options === 'remove') {\n            opts.remove = true;\n        }\n\n        return opts;\n    };\n\n    /*\n    *  matchHeight\n    *  plugin definition\n    */\n\n    var matchHeight = $.fn.matchHeight = function(options) {\n        var opts = _parseOptions(options);\n\n        // handle remove\n        if (opts.remove) {\n            var that = this;\n\n            // remove fixed height from all selected elements\n            this.css(opts.property, '');\n\n            // remove selected elements from all groups\n            $.each(matchHeight._groups, function(key, group) {\n                group.elements = group.elements.not(that);\n            });\n\n            // TODO: cleanup empty groups\n\n            return this;\n        }\n\n        if (this.length <= 1 && !opts.target) {\n            return this;\n        }\n\n        // keep track of this group so we can re-apply later on load and resize events\n        matchHeight._groups.push({\n            elements: this,\n            options: opts\n        });\n\n        // match each element's height to the tallest element in the selection\n        matchHeight._apply(this, opts);\n\n        return this;\n    };\n\n    /*\n    *  plugin global options\n    */\n\n    matchHeight.version = 'master';\n    matchHeight._groups = [];\n    matchHeight._throttle = 80;\n    matchHeight._maintainScroll = false;\n    matchHeight._beforeUpdate = null;\n    matchHeight._afterUpdate = null;\n    matchHeight._rows = _rows;\n    matchHeight._parse = _parse;\n    matchHeight._parseOptions = _parseOptions;\n\n    /*\n    *  matchHeight._apply\n    *  apply matchHeight to given elements\n    */\n\n    matchHeight._apply = function(elements, options) {\n        var opts = _parseOptions(options),\n            $elements = $(elements),\n            rows = [$elements];\n\n        // take note of scroll position\n        var scrollTop = $(window).scrollTop(),\n            htmlHeight = $('html').outerHeight(true);\n\n        // get hidden parents\n        var $hiddenParents = $elements.parents().filter(':hidden');\n\n        // cache the original inline style\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.data('style-cache', $that.attr('style'));\n        });\n\n        // temporarily must force hidden parents visible\n        $hiddenParents.css('display', 'block');\n\n        // get rows if using byRow, otherwise assume one row\n        if (opts.byRow && !opts.target) {\n\n            // must first force an arbitrary equal height so floating elements break evenly\n            $elements.each(function() {\n                var $that = $(this),\n                    display = $that.css('display');\n\n                // temporarily force a usable display value\n                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                    display = 'block';\n                }\n\n                // cache the original inline style\n                $that.data('style-cache', $that.attr('style'));\n\n                $that.css({\n                    'display': display,\n                    'padding-top': '0',\n                    'padding-bottom': '0',\n                    'margin-top': '0',\n                    'margin-bottom': '0',\n                    'border-top-width': '0',\n                    'border-bottom-width': '0',\n                    'height': '100px',\n                    'overflow': 'hidden'\n                });\n            });\n\n            // get the array of rows (based on element top position)\n            rows = _rows($elements);\n\n            // revert original inline styles\n            $elements.each(function() {\n                var $that = $(this);\n                $that.attr('style', $that.data('style-cache') || '');\n            });\n        }\n\n        $.each(rows, function(key, row) {\n            var $row = $(row),\n                targetHeight = 0;\n\n            if (!opts.target) {\n                // skip apply to rows with only one item\n                if (opts.byRow && $row.length <= 1) {\n                    $row.css(opts.property, '');\n                    return;\n                }\n\n                // iterate the row and find the max height\n                $row.each(function(){\n                    var $that = $(this),\n                        style = $that.attr('style'),\n                        display = $that.css('display');\n\n                    // temporarily force a usable display value\n                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                        display = 'block';\n                    }\n\n                    // ensure we get the correct actual height (and not a previously set height value)\n                    var css = { 'display': display };\n                    css[opts.property] = '';\n                    $that.css(css);\n\n                    // find the max height (including padding, but not margin)\n                    if ($that.outerHeight(false) > targetHeight) {\n                        targetHeight = $that.outerHeight(false);\n                    }\n\n                    // revert styles\n                    if (style) {\n                        $that.attr('style', style);\n                    } else {\n                        $that.css('display', '');\n                    }\n                });\n            } else {\n                // if target set, use the height of the target element\n                targetHeight = opts.target.outerHeight(false);\n            }\n\n            // iterate the row and apply the height to all elements\n            $row.each(function(){\n                var $that = $(this),\n                    verticalPadding = 0;\n\n                // don't apply to a target\n                if (opts.target && $that.is(opts.target)) {\n                    return;\n                }\n\n                // handle padding and border correctly (required when not using border-box)\n                if ($that.css('box-sizing') !== 'border-box') {\n                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));\n                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));\n                }\n\n                // set the height (accounting for padding and border)\n                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');\n            });\n        });\n\n        // revert hidden parents\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.attr('style', $that.data('style-cache') || null);\n        });\n\n        // restore scroll position if enabled\n        if (matchHeight._maintainScroll) {\n            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));\n        }\n\n        return this;\n    };\n\n    /*\n    *  matchHeight._applyDataApi\n    *  applies matchHeight to all elements with a data-match-height attribute\n    */\n\n    matchHeight._applyDataApi = function() {\n        var groups = {};\n\n        // generate groups by their groupId set by elements using data-match-height\n        $('[data-match-height], [data-mh]').each(function() {\n            var $this = $(this),\n                groupId = $this.attr('data-mh') || $this.attr('data-match-height');\n\n            if (groupId in groups) {\n                groups[groupId] = groups[groupId].add($this);\n            } else {\n                groups[groupId] = $this;\n            }\n        });\n\n        // apply matchHeight to each group\n        $.each(groups, function() {\n            this.matchHeight(true);\n        });\n    };\n\n    /*\n    *  matchHeight._update\n    *  updates matchHeight on all current groups with their correct options\n    */\n\n    var _update = function(event) {\n        if (matchHeight._beforeUpdate) {\n            matchHeight._beforeUpdate(event, matchHeight._groups);\n        }\n\n        $.each(matchHeight._groups, function() {\n            matchHeight._apply(this.elements, this.options);\n        });\n\n        if (matchHeight._afterUpdate) {\n            matchHeight._afterUpdate(event, matchHeight._groups);\n        }\n    };\n\n    matchHeight._update = function(throttle, event) {\n        // prevent update if fired from a resize event\n        // where the viewport width hasn't actually changed\n        // fixes an event looping bug in IE8\n        if (event && event.type === 'resize') {\n            var windowWidth = $(window).width();\n            if (windowWidth === _previousResizeWidth) {\n                return;\n            }\n            _previousResizeWidth = windowWidth;\n        }\n\n        // throttle updates\n        if (!throttle) {\n            _update(event);\n        } else if (_updateTimeout === -1) {\n            _updateTimeout = setTimeout(function() {\n                _update(event);\n                _updateTimeout = -1;\n            }, matchHeight._throttle);\n        }\n    };\n\n    /*\n    *  bind events\n    */\n\n    // apply on DOM ready event\n    $(matchHeight._applyDataApi);\n\n    // use on or bind where supported\n    var on = $.fn.on ? 'on' : 'bind';\n\n    // update heights on load and resize events\n    $(window)[on]('load', function(event) {\n        matchHeight._update(false, event);\n    });\n\n    // throttled update heights on resize events\n    $(window)[on]('resize orientationchange', function(event) {\n        matchHeight._update(true, event);\n    });\n\n});\n","var nav = document.querySelector(\"nav ul\"),\nnavToggle = document.querySelector(\"nav .skip\");\nif (navToggle) {\nnavToggle.addEventListener(\"click\",\nfunction(e) {\nif (nav.className == \"open\") {\nnav.className = \"\";\n} else {\nnav.className = \"open\";\n}\ne.preventDefault();\n}, false);\n}\n\n/* Any click outside of the nav element will close the menu if it's open */\nvar specifiedElement = document.querySelector('nav');\ndocument.addEventListener('click', function(event) {\nvar isClickInside = specifiedElement.contains(event.target);\nif (!isClickInside && nav.className == \"open\") {\nnav.className = \"\";\n} \n});","(function() {\n    tinymce.PluginManager.add('custom_elements_mce_button', function(editor, url) {\n        editor.addButton('custom_elements_mce_button', {\n            icon: false,\n            text: \"Custom Elements\",\n            onclick: function() {\n                editor.windowManager.open({\n                    title: \"Insert Custom Element\",\n                    body: [{\n                        type   : 'listbox',\n                        name   : 'form_insert',\n                        label  : 'Custom Element Insertion',\n                        values : [\n                            { text: 'Example Name', value: 'example_shortcode' }\n                        ],\n                        value : 'test2' // Sets the default\n                    }],\n                    onsubmit: function(e) {\n                        editor.insertContent(\n                            '[custom_element type=\"' +\n                            e.data.form_insert + \n                            '\"]'\n                        );\n                    }\n                });\n            }\n        });\n    });\n})();"]}